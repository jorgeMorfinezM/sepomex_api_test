# Example YAML to get you started quickly.
# Be aware that YAML has indentation based coping.
# Code completion support is available so start typing for available options.
swagger: '2.0'
info:
  version: "1.0.0"
  title: SEPOMEX - Gestor de Estados, Municipios, Ciudades, Colonias y Codigos Postales de Mexico
  description: |
    </br>
    API para Gestionar Estados, Municipios, Ciudades, Colonias
    y Codigos Postales de Mexico.
    </br>
    </br>
  contact: 
      name: API Support
      url: https://github.com/jorgeMorfinezM/sepomex_api_test/
      email: jorge.morfinez.m@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  
host:
  localhost:8080
basePath: "/api/v1/manager/sepomex"
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: "Login"
    description: "Endpoint to get Token Bearer POST the username and password registered"
  - name: "Looking for States by Filters"
    description: "Endpoint to find States"
  - name: "Manage States"
    description: "Endpoint to insert and get all States (manage)"
  - name: "Looking for Town by Filters"
    description: "Endpoint to find Towns"
  - name: "Manage Towns"
    description: "Endpoint to insert and get all Towns (manage)"
  - name: "Manage Cities"
    description: "Endpoint to insert and get all Cities (manage)"
  - name: "Manage Suburbs"
    description: "Endpoint to insert and get all Suburbs (manage)"

paths:
  /auth/login/:
    post:
      tags:
        - "Login"
      description:
        Get Bearer Token by username (email) and password to authenticate to the API endpoints.
      parameters:
        - name: Authorization
          in: body
          description: Payload with authentication credentials to API.
          required: true
          schema:
            $ref: '#/definitions/Authorization'
      responses:
        200:
          description: Successful response Token Bearer
          schema:
            title: TokenRequest
            type: array
            items:
              $ref: '#/definitions/TokenRequest'
        404:
          description: Page Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Request Data Conflict
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        401:
          description: 401 Unauthorized
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /estado/filter/:
    get:
      tags:
        - "Looking for States by Filters"
      description:
        Get All States registered by filters.
      parameters:
        - name: FilterStates
          in: body
          description: Payload with filters to find States.
          required: true
          schema:
            $ref: '#/definitions/FilterStates'
      responses:
        200:
          description: Successful response
          schema:
            title: ResponseFilterStates
            type: array
            items:
              $ref: '#/definitions/ResponseFilterStates'
        404:
          description: Page Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Request Data Conflict
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        401:
          description: 401 Unauthorized
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /estado/:
    post:
      tags:
        - "Manage States"
      description:
        Endpoint to insert and get all States (manage).
      parameters:
        - name: FilterStates
          in: body
          description: Payload with States data to insert.
          required: true
          schema:
            $ref: '#/definitions/FilterStates'
      responses:
        200:
          description: Successful response States Register
          schema:
            title: ResponseFilterStates
            type: array
            items:
              $ref: '#/definitions/ResponseFilterStates'
        404:
          description: Page Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Request Data Conflict
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        401:
          description: 401 Unauthorized
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
    get:
      tags:
        - "Manage States"
      description:
        Get data States.
      parameters:
        - name: Pagination
          in: body
          description: Payload with pagination data to Get.
          required: false
          schema:
            $ref: '#/definitions/Pagination'
      responses:
        200:
          description: Successful response Driver Register
          schema:
            title: ResponseFilterStates
            type: array
            items:
              $ref: '#/definitions/ResponseFilterStates'
        404:
          description: Page Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Request Data Conflict
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        401:
          description: 401 Unauthorized
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /municipio/filter/:
    get:
      tags:
        - "Looking for Town by Filters"
      description:
        Get All Towns registered by filters.
      parameters:
        - name: FilterTown
          in: body
          description: Payload with filters to find Towns.
          required: true
          schema:
            $ref: '#/definitions/FilterTown'
      responses:
        200:
          description: Successful response
          schema:
            title: ResponseFilterTowns
            type: array
            items:
              $ref: '#/definitions/ResponseFilterTowns'
        404:
          description: Page Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Request Data Conflict
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        401:
          description: 401 Unauthorized
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

  /municipio/:
    post:
      tags:
        - "Manage Towns"
      description:
        Endpoint to insert and get all Towns (manage).
      parameters:
        - name: FilterTown
          in: body
          description: Payload with Town data to insert.
          required: true
          schema:
            $ref: '#/definitions/FilterTown'
      responses:
        200:
          description: Successful response Town Register
          schema:
            title: ResponseFilterTowns
            type: array
            items:
              $ref: '#/definitions/ResponseFilterTowns'
        404:
          description: Page Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Request Data Conflict
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        401:
          description: 401 Unauthorized
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
    get:
      tags:
        - "Manage Towns"
      description:
        Get data Towns.
      parameters:
        - name: Pagination
          in: body
          description: Payload with pagination data to Get.
          required: false
          schema:
            $ref: '#/definitions/Pagination'
      responses:
        200:
          description: Successful response Town Register
          schema:
            title: ResponseFilterTowns
            type: array
            items:
              $ref: '#/definitions/ResponseFilterTowns'
        404:
          description: Page Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Request Data Conflict
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        401:
          description: 401 Unauthorized
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'

definitions:
  Error:
    allOf:
      - $ref: '#/definitions/Error'
      - required:
        - error_code
        - error_message
        type: "object"
        properties:
          error_code:
            type: integer
            format: int32
          error_message:
            type: string

  DataUserLogin:
    allOf:
      - $ref: '#/definitions/DataUserLogin'
      - required:
          - Username
          - Password
        type: "object"
        properties:
          Username:
            type: string
          Password:
            type: string

  Authorization:
    allOf:
      - $ref: '#/definitions/Authorization'
      - required:
        - username
        - password
        type: "object"
        properties:
          username:
            type: string
          password:
            type: string

  TokenRequest:
    allOf:
      - $ref: '#/definitions/TokenRequest'
      - required:
        - message_login
        - access_token
        - refresh_token
        - data
        type: "object"
        properties:
          message_login:
            type: string
          access_token:
            type: string
          refresh_token:
            type: string
          data:
            type: array
            items:
              $ref: '#/definitions/DataUserLogin'

  Pagination:
    allOf:
      - $ref: '#/definitions/Pagination'
      - required:
        - offset
        - limit
        type: "object"
        properties:
          offset:
            type: integer
            format: int64
          limit:
            type: integer
            format: int64

  FilterStates:
    allOf:
      - $ref: '#/definitions/FilterStates'
      - required:
        - nombre_estado
        - clave_estado
        type: "object"
        properties:
          nombre_estado:
            type: string
          clave_estado:
            type: string

  ResponseFilterStates:
    allOf:
      - $ref: '#/definitions/ResponseFilterStates'
      - required:
        - id_estado
        - nombre_estado
        - clave_estado
        type: "object"
        properties:
          id_estado:
            type: integer
            format: int64
          nombre_estado:
            type: string
          clave_estado:
            type: string

  FilterTown:
    allOf:
      - $ref: '#/definitions/FilterTown'
      - required:
        - nombre_municipio
        - clave_municipio
        - id_estaddo
        type: "object"
        properties:
          nombre_municipio:
            type: string
          clave_municipio:
            type: string
          id_estado:
            type: integer
            format: int64

  ResponseFilterTowns:
    allOf:
      - $ref: '#/definitions/ResponseFilterTowns'
      - required:
        - id_municipio
        - nombre_municipio
        - clave_municipio
        - clave_estado
        type: "object"
        properties:
          id_municipio:
            type: integer
            format: int64
          nombre_municipio:
            type: string
          clave_municipio:
            type: string
          clave_estado:
            type: integer
            format: int64
